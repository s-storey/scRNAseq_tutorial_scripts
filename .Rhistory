library(Seurat)
library(Seurat)
# Install (if needed) and load the required packages.
# In practice, you might need to install them beforehand.
install.packages("Seurat")         # For single-cell analysis
install.packages("Seurat")
install.packages("patchwork")      # For combining plots
install.packages("patchwork")
library(Seurat)
library(dplyr)
library(ggplot2)
library(patchwork)
library(Seurat)
library(Seurat)
library(dplyr)
library(ggplot2)
library(patchwork)
# paste the path here
data_dir <- "your/path/to/hg9"
# paste the path here
data_dir <- "~/Library/Mobile Documents/com~apple~CloudDocs/Hardrive/PhD/Presentations and Posters/REALISE scRNAseq workshop/scRNAseq_workshop_v2/filtered_gene_bc_matrices/hg19"
# Load the PBMC dataset
# if we had a .h5 file, we would use Read10X_h5 instead
pbmc.data <- Read10X(data.dir = data_dir)
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "Tutorial project", min.cells = 3, min.features = 200)
pbmc
head(pbmc@meta.data) # printed in console
View(pbmc@meta.data) # a spreadsheet like view
View(pbmc)
sc_object <- pbmc
# First, let's visualize the QC metrics that are already part of pbmc3k metadata.
head(sc_object@meta.data)
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
sc_object[["percent.mt"]] <- PercentageFeatureSet(sc_object, pattern = "^MT-") # mt- for zebrafish, Mt- for mouse?
head(sc_object@meta.data)
# We can plot some distributions to check the ranges:
VlnPlot(sc_object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# Check how many cells remain after filtering:
dim(pbmc) ## this was our unaltered data - 2700 cells
dim(sc_object) ## this is our data subset - 2638
sc_object <- subset(sc_object, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
dim(sc_object) ## this is our data subset - 2638
sc_object <- NormalizeData(sc_object,
normalization.method = "LogNormalize",
scale.factor = 10000)
sc_object <- FindVariableFeatures(sc_object,
selection.method = "vst",
nfeatures = 2000)
# We can visualize the top variable features:
top10 <- head(VariableFeatures(sc_object), 10)
VariableFeaturePlot(sc_object) %>% LabelPoints(plot = ., points = top10, repel = TRUE)
all.genes <- rownames(sc_object)
sc_object <- ScaleData(sc_object, features = all.genes)
sc_object <- RunPCA(sc_object, features = VariableFeatures(object = sc_object))
# Let's examine the results for the first 5 PCs :
print(sc_object[["pca"]], dims = 1:5, nfeatures = 5)  # top genes driving each PC
# Another method to visualise
VizDimLoadings(sc_object, dims = 1:5, reduction = "pca")
# We can visualize the variance explained by each PC to decide how many to use.
# Documentation:  https://satijalab.org/seurat/reference/elbowplot
ElbowPlot(sc_object)
# Seurat clustering typically involves two steps:
# 1. Construct a Shared Nearest Neighbor (SNN) graph for a chosen number of PCs using FindNeighbors
# the default number of neighbours is 20
# Documentation: https://satijalab.org/seurat/reference/findneighbors
sc_object <- FindNeighbors(sc_object, dims = 1:10)
# 2. Using an algorithm to cluster cells based on the snn graph with FindClusters
# several different algorithms to use here, seurat defaults to Louvain
# Documentation: https://satijalab.org/seurat/reference/findclusters
sc_object <- FindClusters(sc_object, resolution = 0.5)
# Check the identified clusters:
head(Idents(sc_object))
sc_object <- RunUMAP(sc_object, dims = 1:10)
View(sc_object)
# Let's see the 2D UMAP plot with cluster identities:
DimPlot(sc_object, reduction = "umap", label = TRUE)
# 2. Using an algorithm to cluster cells based on the snn graph with FindClusters
# several different algorithms to use here, seurat defaults to Louvain
# Documentation: https://satijalab.org/seurat/reference/findclusters
sc_object <- FindClusters(sc_object, resolution = 0.8)
sc_object <- RunUMAP(sc_object, dims = 1:10)
# Let's see the 2D UMAP plot with cluster identities:
DimPlot(sc_object, reduction = "umap", label = TRUE)
# 2. Using an algorithm to cluster cells based on the snn graph with FindClusters
# several different algorithms to use here, seurat defaults to Louvain
# Documentation: https://satijalab.org/seurat/reference/findclusters
sc_object <- FindClusters(sc_object, resolution = 0.5)
# Check the identified clusters:
head(Idents(sc_object))
sc_object <- RunUMAP(sc_object, dims = 1:10)
# Let's see the 2D UMAP plot with cluster identities:
DimPlot(sc_object, reduction = "umap", label = TRUE)
# To find differentially expressed genes (markers) for each cluster:
cluster_markers <- FindAllMarkers(sc_object,
only.pos = TRUE, ## change this to false if you want to include downregulated genes
min.pct = 0.25,
logfc.threshold = 0.25)
cluster_markers
# Let's see the top markers per cluster:
cluster_markers %>% # the %>% operator is part of the dplyr package
group_by(cluster) %>%
slice_max(n = 5, order_by = avg_log2FC) %>%
print(n=45)
# Let's see the top markers per cluster:
cluster_markers %>% # the %>% operator is part of the dplyr package
group_by(cluster) %>%
slice_max(n = 3, order_by = avg_log2FC) %>%
print(n=45)
View(cluster_markers)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Hardrive/PhD/Presentations and Posters/REALISE scRNAseq workshop/scRNAseq_workshop_v2")
write.csv(cluster_markers, "cluster_markers.csv")
# Seurat provides many plotting functions. Some commonly used:
# - DimPlot() for clusters, metadata visualization
DimPlot(sc_object, reduction = "umap", label = TRUE)
# - FeaturePlot() for gene expression over UMAP
FeaturePlot(sc_object, features = "CD3D")
# Seurat provides many plotting functions. Some commonly used:
# - DimPlot() for clusters, metadata visualization
DimPlot(sc_object, reduction = "umap", label = TRUE)
# - FeaturePlot() for gene expression over UMAP
FeaturePlot(sc_object, features = "CD3D")
# Let's see the top markers per cluster:
cluster_markers %>% # the %>% operator is part of the dplyr package
group_by(cluster) %>%
slice_max(n = 3, order_by = avg_log2FC) %>%
print(n=45)
# - FeaturePlot() for gene expression over UMAP
FeaturePlot(sc_object, features = "CCR7")
# - VlnPlot() for gene expression distribution
VlnPlot(sc_object, features = "CD3D")
# - VlnPlot() for gene expression distribution
VlnPlot(sc_object, features = "CCR7")
# - VlnPlot() for gene expression distribution
VlnPlot(sc_object, features = "CD3D")
# - RidgePlot() or DotPlot() for gene expression in a cluster context
DotPlot(sc_object, features = "CD3D")
# - DoHeatmap() for a heatmap of gene expression.
# Lets make a list of the top 5 genes per cluster first:
cluster_markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 5) %>%
ungroup() -> top5
sc_object@meta.data$percent.mt
sc_object$percent.mt
# - DoHeatmap() for a heatmap of gene expression.
# Lets make a list of the top 5 genes per cluster first:
cluster_markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 5) %>%
ungroup() -> top5
top5
DoHeatmap(sc_object, features = top5$gene) + NoLegend()
# Example: Combine multiple plots with patchwork
p1 <- DimPlot(sc_object, reduction = "umap", label = TRUE) + ggtitle("UMAP Clusters")
p2 <- VlnPlot(sc_object, features = "CD3D")
DimPlot(sc_object, reduction = "umap", label = TRUE) + ggtitle("UMAP Clusters")
p1
p2 <- VlnPlot(sc_object, features = "CD3D")
p1 + p2
p2
p2
# Example: Saving a plot
ggsave("UMAP_with_clusters.png", plot = p2, width = 6, height = 5, dpi = 300)
# It's often useful to save your Seurat object for future analysis:
saveRDS(sc_object, file = "sc_object_postQC.rds")
# Later, you can load it with:
sc_objectpost_qc <- readRDS("sc_object_postQC.rds")
cluster_markers %>%
group_by(cluster) %>%
slice_max(n = 5, order_by = avg_log2FC) %>%
print(n=45)
FeaturePlot(sc_object, features = c("IL7R", "CD14", "S100A4", "MS4A1", "CD8A", "FCGR3A", "GNLY", "FCER1A", "PPBP"),
reduction = "umap", pt.size = 0.5, ncol = 3)
# Optionally, look at a dot plot which shows average expression across clusters:
DotPlot(sc_object,
features = c("IL7R", "CD14", "S100A4", "MS4A1", "CD8A", "FCGR3A", "GNLY", "FCER1A", "PPBP"),
cols = c("lightgrey", "blue")) +
RotatedAxis()
###################################
# Method 1
###################################
# From visual inspection and knowledge of typical PBMC markers,
# we can assign cluster identities. Let's see how many clusters we have:
levels(Idents(sc_object))
# In a fresh object processing, clusters are labeled numerically in the
# 'seurat_clusters' column
head(sc_object@meta.data$seurat_clusters)
# If for whatever reason you want to store current cluster IDs,
# you can do so with:
current.cluster.ids <- levels(sc_object)
# Suppose we've identified the clusters with the following broad labels
# (this mapping is approximate; confirm with your own analysis):
new.cluster.ids <- c("Naive CD4 T",     # Cluster 0
"CD14+ Mono",      # Cluster 1
"Memory CD4+",     # Cluster 2
"B",               # Cluster 3
"CD8+ T",          # Cluster 4
"FCGR3A+ Mono",    # Cluster 5
"NK",              # Cluster 6
"DC",              # Cluster 7
"Platelet")        # Cluster 8
new.cluster.ids
# and these are what the current ident is set as
head(Idents(sc_object))
# Make sure the length of new.cluster.ids matches the number of current clusters:
length(new.cluster.ids)
# [1] 9
length(current.cluster.ids)
# Then rename the identities:
names(new.cluster.ids) <- current.cluster.ids
sc_object <- RenameIdents(sc_object, new.cluster.ids)
levels(Idents(sc_object))
# Lets visualize the data with the annotated clusters
DimPlot(sc_object, reduction = "umap", label = TRUE, pt.size = 0.5) +
ggtitle("UMAP with annotated cell types")
######### Method 2 ###############
# Here I'll eset the idents back to seurat_clsuters for demonstrative purposes
Idents(sc_object) <- "seurat_clusters"
sc_object <- RenameIdents(sc_object, '0' = "Naive CD4 T",'1' = "CD14+ Mono",
'2' = "Memory CD4+", '3' = 'B', '4' = 'CD8+ T', '5' = 'FCGR3A+ Mono'
, '6' = 'NK', '7' = 'DC', '8' = 'Platelets')
source("~/Library/Mobile Documents/com~apple~CloudDocs/Hardrive/PhD/Presentations and Posters/REALISE scRNAseq workshop/scRNAseq_workshop_v2/scRNAseq_annotation_DE_subsetting.R", echo=TRUE)
# Lets visualize the data with the annotated clusters
DimPlot(sc_object, reduction = "umap", label = TRUE, pt.size = 0.5) +
ggtitle("UMAP with annotated cell types")
# Compare differential expression between NK cells and B cells.
# This analysis aims to identify genes that are differentially expressed in NK cells (group of interest)
# compared to B cells (reference group). Adjusting parameters like min.pct and logfc.threshold helps focus on
# genes that are both robustly and significantly different between the two groups.
markers_NK_vs_B <- FindMarkers(
object = sc_object,
ident.1 = "NK",          # Group of interest: NK cells
ident.2 = "B",           # Reference group: B cells
min.pct = 0.25,          # Only test genes expressed in at least 25% of cells in either group
logfc.threshold = 0.25   # Consider genes with a minimum log2 fold change of 0.25
)
# Inspect the top markers based on adjusted p-value (most statistically significant differences)
top_markers_pval <- markers_NK_vs_B[order(markers_NK_vs_B$p_val_adj), ]
head(top_markers_pval, 10)
# Inspect the top markers with the highest average log2 fold change (most upregulated in NK cells)
top_markers_up <- markers_NK_vs_B[order(-markers_NK_vs_B$avg_log2FC), ]
head(top_markers_pval, 10)
# Inspect the top markers with the highest average log2 fold change (most upregulated in NK cells)
top_markers_up <- markers_NK_vs_B[order(-markers_NK_vs_B$avg_log2FC), ]
head(top_markers_up, 10)
tail(top_markers_down, 10)
# Since PBMC 3k doesn't have a built-in "condition", let's simulate a random one:
sc_object$condition <- sample(c("Control", "Treatment"), size = ncol(sc_object), replace = TRUE)
# Now we can do:
DimPlot(sc_object, reduction = "umap", split.by = "condition", ncol = 2) +
ggtitle("UMAP faceted by condition")
View(sc_object)
markers_treated_vs_control <- FindMarkers(sc_object, ident.1 = "Treatment", ident.2 = "Control")
head(markers_treated_vs_control[order(markers_treated_vs_control$avg_log2FC), ], 10)
tcell_subset <- subset(sc_object, idents = c("Naive CD4 T", "CD8+ T"))
DimPlot(tcell_subset, reduction = "umap")
# Confirm the dimension (number of cells/genes) in the subset
dim(sc_object)
DimPlot(sc_object, reduction = "umap")
DimPlot(tcell_subset, reduction = "umap")
# Confirm the dimension (number of cells/genes) in the subset
dim(tcell_subset)
# Re-normalize (LogNormalize):
tcell_subset <- NormalizeData(tcell_subset,
normalization.method = "LogNormalize",
scale.factor = 10000)
# Find variable features:
tcell_subset <- FindVariableFeatures(tcell_subset, selection.method = "vst", nfeatures = 2000)
# Scale data:
# Optionally, we can regress out percent.mt or cell cycle scores if we want:
all.genes <- rownames(tcell_subset)
tcell_subset <- ScaleData(tcell_subset, features = all.genes)
# PCA:
tcell_subset <- RunPCA(tcell_subset, features = VariableFeatures(tcell_subset))
ElbowPlot(tcell_subset)
# Clustering:
tcell_subset <- FindNeighbors(tcell_subset, dims = 1:10)
tcell_subset <- FindClusters(tcell_subset, resolution = 0.4)
tcell_subset <- RunUMAP(tcell_subset, dims = 1:10)
# Visualize:
DimPlot(tcell_subset, reduction = "umap", label = TRUE, pt.size = 0.5) +
ggtitle("T cell Subset UMAP")
DimPlot(tcell_subset, reduction = "umap", label = TRUE, pt.size = 0.5) +
ggtitle("Detailed T cell Subset Annotation")
new.t.subcluster.ids <- c("CCR7+ cells", # cluster 0
"NCR3+ cells", # cluster 1
"GZMH+ cells")  # cluster 2
# Make sure lengths match:
length(current.t.subcluster.ids)
length(new.t.subcluster.ids)
names(new.t.subcluster.ids) <- current.t.subcluster.ids
tcell_subset <- RenameIdents(tcell_subset, new.t.subcluster.ids)
DimPlot(tcell_subset, reduction = "umap", label = TRUE, pt.size = 0.5) +
ggtitle("Detailed T cell Subset Annotation")
DimPlot(sc_object, reduction = "umap", group.by = "seurat_clusters", label = TRUE) +
ggtitle("UMAP of PBMC 3k (Clusters)")
# Variation: color by another metadata column (e.g., cell type if annotated)
DimPlot(sc_object, reduction = "umap", group.by = "celltype", label = TRUE)
# Variation: color by another metadata column (e.g., cell type if annotated)
DimPlot(sc_object, reduction = "umap", group.by = "celltype", label = TRUE)
c
FeaturePlot(sc_object, features = c("MS4A1", "CD3D", "LTB"), reduction = "umap",
pt.size = 0.5) ### automatically assigns placement
DotPlot(sc_object,
features = c("MS4A1", "CD3D", "CD14", "GNLY", "FCGR3A", "CD8A"),
cols = c("lightgrey", "blue")) +
RotatedAxis() +
ggtitle("DotPlot of key markers across clusters")
DotPlot(sc_object,
features = c("MS4A1", "CD3D", "CD14", "GNLY", "FCGR3A", "CD8A"),
cols = c("lightgrey", "blue"))
DotPlot(sc_object,
features = c("MS4A1", "CD3D", "CD14", "GNLY", "FCGR3A", "CD8A"),
cols = c("lightgrey", "blue")) +
RotatedAxis() +
ggtitle("DotPlot of key markers across clusters")
# We can use DoHeatmap to visualize expression of top markers across clusters:
DoHeatmap(sc_object, features = top_markers$gene) +
scale_fill_gradientn(colors = c("blue", "white", "red")) + # here I've just customized the colours
ggtitle("Heatmap of Top Cluster Markers")
# Let's identify markers for demonstration. We limit for speed:
cluster_markers <- FindAllMarkers(sc_object, only.pos = TRUE,
min.pct = 0.25, logfc.threshold = 0.25)
top_markers <- cluster_markers %>% group_by(cluster) %>% slice_max(n = 5, order_by = avg_log2FC)
# We can use DoHeatmap to visualize expression of top markers across clusters:
DoHeatmap(sc_object, features = top_markers$gene) +
scale_fill_gradientn(colors = c("blue", "white", "red")) + # here I've just customized the colours
ggtitle("Heatmap of Top Cluster Markers")
# Install and load required packages.
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
